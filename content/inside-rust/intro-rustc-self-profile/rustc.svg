<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_borrowck (18,228,971 samples, 0.16%)</title><rect x="1.9424%" y="133" width="0.1593%" height="15" fill="rgb(227,0,7)"/><text x="2.1924%" y="143.50"></text></g><g><title>is_freeze_raw (22,543,989 samples, 0.20%)</title><rect x="2.4308%" y="85" width="0.1970%" height="15" fill="rgb(217,0,24)"/><text x="2.6808%" y="95.50"></text></g><g><title>evaluate_obligation (15,619,755 samples, 0.14%)</title><rect x="2.4913%" y="69" width="0.1365%" height="15" fill="rgb(221,193,54)"/><text x="2.7413%" y="79.50"></text></g><g><title>is_copy_raw (11,460,926 samples, 0.10%)</title><rect x="3.8718%" y="53" width="0.1002%" height="15" fill="rgb(248,212,6)"/><text x="4.1218%" y="63.50"></text></g><g><title>needs_drop_raw (21,529,709 samples, 0.19%)</title><rect x="3.8259%" y="69" width="0.1882%" height="15" fill="rgb(208,68,35)"/><text x="4.0759%" y="79.50"></text></g><g><title>mir_built (160,164,161 samples, 1.40%)</title><rect x="2.6278%" y="85" width="1.3999%" height="15" fill="rgb(232,128,0)"/><text x="2.8778%" y="95.50"></text></g><g><title>mir_const (215,178,469 samples, 1.88%)</title><rect x="2.2414%" y="117" width="1.8808%" height="15" fill="rgb(207,160,47)"/><text x="2.4914%" y="127.50">m..</text></g><g><title>unsafety_check_result (204,635,053 samples, 1.79%)</title><rect x="2.3336%" y="101" width="1.7886%" height="15" fill="rgb(228,23,34)"/><text x="2.5836%" y="111.50">u..</text></g><g><title>mir_validated (235,295,886 samples, 2.06%)</title><rect x="2.1017%" y="133" width="2.0566%" height="15" fill="rgb(218,30,26)"/><text x="2.3517%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (30,501,338 samples, 0.27%)</title><rect x="4.3297%" y="133" width="0.2666%" height="15" fill="rgb(220,122,19)"/><text x="4.5797%" y="143.50"></text></g><g><title>MIR_borrow_checking (524,702,964 samples, 4.59%)</title><rect x="0.0106%" y="165" width="4.5863%" height="15" fill="rgb(250,228,42)"/><text x="0.2606%" y="175.50">MIR_b..</text></g><g><title>mir_borrowck (522,615,259 samples, 4.57%)</title><rect x="0.0288%" y="149" width="4.5680%" height="15" fill="rgb(240,193,28)"/><text x="0.2788%" y="159.50">mir_b..</text></g><g><title>misc_checking_1 (13,523,529 samples, 0.12%)</title><rect x="4.6009%" y="165" width="0.1182%" height="15" fill="rgb(216,20,37)"/><text x="4.8509%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (15,996,252 samples, 0.14%)</title><rect x="4.7192%" y="149" width="0.1398%" height="15" fill="rgb(206,188,39)"/><text x="4.9692%" y="159.50"></text></g><g><title>check_mod_liveness (13,935,980 samples, 0.12%)</title><rect x="4.7372%" y="133" width="0.1218%" height="15" fill="rgb(217,207,13)"/><text x="4.9872%" y="143.50"></text></g><g><title>misc_checking_2 (46,889,373 samples, 0.41%)</title><rect x="4.7192%" y="165" width="0.4098%" height="15" fill="rgb(231,73,38)"/><text x="4.9692%" y="175.50"></text></g><g><title>match_checking (30,890,300 samples, 0.27%)</title><rect x="4.8590%" y="149" width="0.2700%" height="15" fill="rgb(225,20,46)"/><text x="5.1090%" y="159.50"></text></g><g><title>check_match (30,051,172 samples, 0.26%)</title><rect x="4.8663%" y="133" width="0.2627%" height="15" fill="rgb(210,31,41)"/><text x="5.1163%" y="143.50"></text></g><g><title>lint_checking (20,451,292 samples, 0.18%)</title><rect x="5.2104%" y="149" width="0.1788%" height="15" fill="rgb(221,200,47)"/><text x="5.4604%" y="159.50"></text></g><g><title>privacy_checking_modules (22,786,254 samples, 0.20%)</title><rect x="5.4474%" y="149" width="0.1992%" height="15" fill="rgb(226,26,5)"/><text x="5.6974%" y="159.50"></text></g><g><title>check_mod_privacy (22,745,555 samples, 0.20%)</title><rect x="5.4477%" y="133" width="0.1988%" height="15" fill="rgb(249,33,26)"/><text x="5.6977%" y="143.50"></text></g><g><title>misc_checking_3 (60,093,514 samples, 0.53%)</title><rect x="5.1290%" y="165" width="0.5253%" height="15" fill="rgb(235,183,28)"/><text x="5.3790%" y="175.50"></text></g><g><title>adt_def (14,686,192 samples, 0.13%)</title><rect x="6.1975%" y="53" width="0.1284%" height="15" fill="rgb(221,5,38)"/><text x="6.4475%" y="63.50"></text></g><g><title>metadata_decode_entry (12,634,663 samples, 0.11%)</title><rect x="6.2155%" y="37" width="0.1104%" height="15" fill="rgb(247,18,42)"/><text x="6.4655%" y="47.50"></text></g><g><title>trait_impls_of (37,417,591 samples, 0.33%)</title><rect x="5.9989%" y="101" width="0.3271%" height="15" fill="rgb(241,131,45)"/><text x="6.2489%" y="111.50"></text></g><g><title>type_of (28,001,003 samples, 0.24%)</title><rect x="6.0812%" y="85" width="0.2447%" height="15" fill="rgb(249,31,29)"/><text x="6.3312%" y="95.50"></text></g><g><title>metadata_decode_entry (22,442,529 samples, 0.20%)</title><rect x="6.1298%" y="69" width="0.1962%" height="15" fill="rgb(225,111,53)"/><text x="6.3798%" y="79.50"></text></g><g><title>coherent_trait (75,794,955 samples, 0.66%)</title><rect x="5.6635%" y="133" width="0.6625%" height="15" fill="rgb(238,160,17)"/><text x="5.9135%" y="143.50"></text></g><g><title>specialization_graph_of (72,652,346 samples, 0.64%)</title><rect x="5.6909%" y="117" width="0.6350%" height="15" fill="rgb(214,148,48)"/><text x="5.9409%" y="127.50"></text></g><g><title>coherence_checking (76,837,763 samples, 0.67%)</title><rect x="5.6628%" y="149" width="0.6716%" height="15" fill="rgb(232,36,49)"/><text x="5.9128%" y="159.50"></text></g><g><title>dropck_outlives (11,808,617 samples, 0.10%)</title><rect x="11.3527%" y="101" width="0.1032%" height="15" fill="rgb(209,103,24)"/><text x="11.6027%" y="111.50"></text></g><g><title>evaluate_obligation (45,218,474 samples, 0.40%)</title><rect x="11.4560%" y="101" width="0.3952%" height="15" fill="rgb(229,88,8)"/><text x="11.7060%" y="111.50"></text></g><g><title>method_autoderef_steps (12,329,102 samples, 0.11%)</title><rect x="11.9523%" y="101" width="0.1078%" height="15" fill="rgb(213,181,19)"/><text x="12.2023%" y="111.50"></text></g><g><title>item_bodies_checking (664,759,057 samples, 5.81%)</title><rect x="6.3550%" y="149" width="5.8104%" height="15" fill="rgb(254,191,54)"/><text x="6.6050%" y="159.50">item_bo..</text></g><g><title>typeck_item_bodies (664,749,797 samples, 5.81%)</title><rect x="6.3550%" y="133" width="5.8104%" height="15" fill="rgb(241,83,37)"/><text x="6.6050%" y="143.50">typeck_..</text></g><g><title>typeck_tables_of (662,584,947 samples, 5.79%)</title><rect x="6.3740%" y="117" width="5.7914%" height="15" fill="rgb(233,36,39)"/><text x="6.6240%" y="127.50">typeck_..</text></g><g><title>evaluate_obligation (20,096,437 samples, 0.18%)</title><rect x="12.3622%" y="101" width="0.1757%" height="15" fill="rgb(226,3,54)"/><text x="12.6122%" y="111.50"></text></g><g><title>item_types_checking (43,967,664 samples, 0.38%)</title><rect x="12.1654%" y="149" width="0.3843%" height="15" fill="rgb(245,192,40)"/><text x="12.4154%" y="159.50"></text></g><g><title>check_mod_item_types (43,893,073 samples, 0.38%)</title><rect x="12.1661%" y="133" width="0.3837%" height="15" fill="rgb(238,167,29)"/><text x="12.4161%" y="143.50"></text></g><g><title>typeck_tables_of (26,688,100 samples, 0.23%)</title><rect x="12.3164%" y="117" width="0.2333%" height="15" fill="rgb(232,182,51)"/><text x="12.5664%" y="127.50"></text></g><g><title>generics_of (17,336,676 samples, 0.15%)</title><rect x="12.6517%" y="117" width="0.1515%" height="15" fill="rgb(231,60,39)"/><text x="12.9017%" y="127.50"></text></g><g><title>predicates_of (16,996,637 samples, 0.15%)</title><rect x="12.8122%" y="117" width="0.1486%" height="15" fill="rgb(208,69,12)"/><text x="13.0622%" y="127.50"></text></g><g><title>predicates_defined_on (11,983,303 samples, 0.10%)</title><rect x="12.8560%" y="101" width="0.1047%" height="15" fill="rgb(235,93,37)"/><text x="13.1060%" y="111.50"></text></g><g><title>type_collecting (50,290,293 samples, 0.44%)</title><rect x="12.5502%" y="149" width="0.4396%" height="15" fill="rgb(213,116,39)"/><text x="12.8002%" y="159.50"></text></g><g><title>collect_mod_item_types (50,209,680 samples, 0.44%)</title><rect x="12.5509%" y="133" width="0.4389%" height="15" fill="rgb(222,207,29)"/><text x="12.8009%" y="143.50"></text></g><g><title>region_scope_tree (16,844,722 samples, 0.15%)</title><rect x="13.5426%" y="117" width="0.1472%" height="15" fill="rgb(206,96,30)"/><text x="13.7926%" y="127.50"></text></g><g><title>check_impl_item_well_formed (77,142,384 samples, 0.67%)</title><rect x="13.0163%" y="133" width="0.6743%" height="15" fill="rgb(218,138,4)"/><text x="13.2663%" y="143.50"></text></g><g><title>check_item_well_formed (47,453,817 samples, 0.41%)</title><rect x="13.6906%" y="133" width="0.4148%" height="15" fill="rgb(250,191,14)"/><text x="13.9406%" y="143.50"></text></g><g><title>analysis (1,616,260,722 samples, 14.13%)</title><rect x="0.0104%" y="181" width="14.1272%" height="15" fill="rgb(239,60,40)"/><text x="0.2604%" y="191.50">analysis</text></g><g><title>type_check_crate (970,555,916 samples, 8.48%)</title><rect x="5.6543%" y="165" width="8.4833%" height="15" fill="rgb(206,27,48)"/><text x="5.9043%" y="175.50">type_check_c..</text></g><g><title>wf_checking (130,771,210 samples, 1.14%)</title><rect x="12.9945%" y="149" width="1.1430%" height="15" fill="rgb(225,35,8)"/><text x="13.2445%" y="159.50"></text></g><g><title>const_caller_location (13,508,496 samples, 0.12%)</title><rect x="26.3418%" y="149" width="0.1181%" height="15" fill="rgb(250,213,24)"/><text x="26.5918%" y="159.50"></text></g><g><title>is_freeze_raw (36,630,109 samples, 0.32%)</title><rect x="26.5210%" y="149" width="0.3202%" height="15" fill="rgb(247,123,22)"/><text x="26.7710%" y="159.50"></text></g><g><title>evaluate_obligation (27,617,770 samples, 0.24%)</title><rect x="26.5998%" y="133" width="0.2414%" height="15" fill="rgb(231,138,38)"/><text x="26.8498%" y="143.50"></text></g><g><title>layout_raw (34,130,142 samples, 0.30%)</title><rect x="26.9080%" y="149" width="0.2983%" height="15" fill="rgb(231,145,46)"/><text x="27.1580%" y="159.50"></text></g><g><title>codegen_module (1,373,123,189 samples, 12.00%)</title><rect x="15.3574%" y="165" width="12.0020%" height="15" fill="rgb(251,118,11)"/><text x="15.6074%" y="175.50">codegen_module</text></g><g><title>incr_comp_encode_serialized_dep_graph (14,663,951 samples, 0.13%)</title><rect x="27.4559%" y="117" width="0.1282%" height="15" fill="rgb(217,147,25)"/><text x="27.7059%" y="127.50"></text></g><g><title>incr_comp_persist_dep_graph (33,536,636 samples, 0.29%)</title><rect x="27.3921%" y="149" width="0.2931%" height="15" fill="rgb(247,81,37)"/><text x="27.6421%" y="159.50"></text></g><g><title>incr_comp_encode_dep_graph (26,500,914 samples, 0.23%)</title><rect x="27.4536%" y="133" width="0.2316%" height="15" fill="rgb(209,12,38)"/><text x="27.7036%" y="143.50"></text></g><g><title>incr_comp_serialize_dep_graph (11,570,514 samples, 0.10%)</title><rect x="27.5841%" y="117" width="0.1011%" height="15" fill="rgb(227,1,9)"/><text x="27.8341%" y="127.50"></text></g><g><title>encode_query_results (28,587,528 samples, 0.25%)</title><rect x="27.7252%" y="117" width="0.2499%" height="15" fill="rgb(248,47,43)"/><text x="27.9752%" y="127.50"></text></g><g><title>serialize_dep_graph (66,773,928 samples, 0.58%)</title><rect x="27.3915%" y="165" width="0.5836%" height="15" fill="rgb(221,10,30)"/><text x="27.6415%" y="175.50"></text></g><g><title>incr_comp_persist_result_cache (33,163,498 samples, 0.29%)</title><rect x="27.6853%" y="149" width="0.2899%" height="15" fill="rgb(210,229,1)"/><text x="27.9353%" y="159.50"></text></g><g><title>incr_comp_serialize_result_cache (30,464,627 samples, 0.27%)</title><rect x="27.7088%" y="133" width="0.2663%" height="15" fill="rgb(222,148,37)"/><text x="27.9588%" y="143.50"></text></g><g><title>codegen_crate (1,583,096,052 samples, 13.84%)</title><rect x="14.1382%" y="181" width="13.8373%" height="15" fill="rgb(234,67,33)"/><text x="14.3882%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen_emit_obj (4,891,194,022 samples, 42.75%)</title><rect x="31.5509%" y="149" width="42.7524%" height="15" fill="rgb(247,98,35)"/><text x="31.8009%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>LLVM_module_codegen (6,259,936,731 samples, 54.72%)</title><rect x="27.9846%" y="165" width="54.7161%" height="15" fill="rgb(247,138,52)"/><text x="28.2346%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_make_bitcode (960,732,475 samples, 8.40%)</title><rect x="74.3032%" y="149" width="8.3975%" height="15" fill="rgb(213,79,30)"/><text x="74.5532%" y="159.50">LLVM_module_..</text></g><g><title>LLVM_module_codegen_emit_compressed_bitcode (174,167,805 samples, 1.52%)</title><rect x="81.1783%" y="133" width="1.5223%" height="15" fill="rgb(246,177,23)"/><text x="81.4283%" y="143.50"></text></g><g><title>codegen_module_optimize (7,422,035,896 samples, 64.87%)</title><rect x="27.9755%" y="181" width="64.8736%" height="15" fill="rgb(230,62,27)"/><text x="28.2255%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,161,064,635 samples, 10.15%)</title><rect x="82.7007%" y="165" width="10.1485%" height="15" fill="rgb(216,154,8)"/><text x="82.9507%" y="175.50">LLVM_module_opt..</text></g><g><title>LLVM_module_optimize_module_passes (1,146,561,711 samples, 10.02%)</title><rect x="82.8274%" y="149" width="10.0217%" height="15" fill="rgb(244,35,45)"/><text x="83.0774%" y="159.50">LLVM_module_op..</text></g><g><title>macro_expand_crate (48,538,161 samples, 0.42%)</title><rect x="92.8840%" y="165" width="0.4243%" height="15" fill="rgb(251,115,12)"/><text x="93.1340%" y="175.50"></text></g><g><title>expand_crate (48,518,187 samples, 0.42%)</title><rect x="92.8842%" y="149" width="0.4241%" height="15" fill="rgb(240,54,50)"/><text x="93.1342%" y="159.50"></text></g><g><title>configure_and_expand (82,431,245 samples, 0.72%)</title><rect x="92.8492%" y="181" width="0.7205%" height="15" fill="rgb(233,84,52)"/><text x="93.0992%" y="191.50"></text></g><g><title>resolve_crate (25,377,918 samples, 0.22%)</title><rect x="93.3478%" y="165" width="0.2218%" height="15" fill="rgb(207,117,47)"/><text x="93.5978%" y="175.50"></text></g><g><title>build_hir_map (31,467,333 samples, 0.28%)</title><rect x="93.5701%" y="165" width="0.2750%" height="15" fill="rgb(249,43,39)"/><text x="93.8201%" y="175.50"></text></g><g><title>create_global_ctxt (35,287,114 samples, 0.31%)</title><rect x="93.5697%" y="181" width="0.3084%" height="15" fill="rgb(209,38,44)"/><text x="93.8197%" y="191.50"></text></g><g><title>free_global_ctxt (34,335,543 samples, 0.30%)</title><rect x="94.0690%" y="181" width="0.3001%" height="15" fill="rgb(236,212,23)"/><text x="94.3190%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (45,192,642 samples, 0.40%)</title><rect x="95.1190%" y="101" width="0.3950%" height="15" fill="rgb(242,79,21)"/><text x="95.3690%" y="111.50"></text></g><g><title>needs_drop_raw (14,000,886 samples, 0.12%)</title><rect x="95.7004%" y="101" width="0.1224%" height="15" fill="rgb(211,96,35)"/><text x="95.9504%" y="111.50"></text></g><g><title>metadata_decode_entry (17,139,726 samples, 0.15%)</title><rect x="97.2687%" y="85" width="0.1498%" height="15" fill="rgb(253,215,40)"/><text x="97.5187%" y="95.50"></text></g><g><title>optimized_mir (180,770,717 samples, 1.58%)</title><rect x="95.8657%" y="101" width="1.5801%" height="15" fill="rgb(211,81,21)"/><text x="96.1157%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (343,999,688 samples, 3.01%)</title><rect x="94.5559%" y="117" width="3.0068%" height="15" fill="rgb(208,190,38)"/><text x="94.8059%" y="127.50">mon..</text></g><g><title>monomorphization_collector (345,253,780 samples, 3.02%)</title><rect x="94.5558%" y="133" width="3.0178%" height="15" fill="rgb(235,213,38)"/><text x="94.8058%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (37,527,866 samples, 0.33%)</title><rect x="97.5738%" y="117" width="0.3280%" height="15" fill="rgb(237,122,38)"/><text x="97.8238%" y="127.50"></text></g><g><title>symbol_name (30,513,088 samples, 0.27%)</title><rect x="97.6351%" y="101" width="0.2667%" height="15" fill="rgb(244,218,35)"/><text x="97.8851%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (400,143,006 samples, 3.50%)</title><rect x="94.5421%" y="149" width="3.4975%" height="15" fill="rgb(240,68,47)"/><text x="94.7921%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (53,314,159 samples, 0.47%)</title><rect x="97.5736%" y="133" width="0.4660%" height="15" fill="rgb(210,16,53)"/><text x="97.8236%" y="143.50"></text></g><g><title>cgu_partitioning (15,765,770 samples, 0.14%)</title><rect x="97.9018%" y="117" width="0.1378%" height="15" fill="rgb(235,124,12)"/><text x="98.1518%" y="127.50"></text></g><g><title>exported_symbols (405,898,080 samples, 3.55%)</title><rect x="94.5132%" y="165" width="3.5478%" height="15" fill="rgb(224,169,11)"/><text x="94.7632%" y="175.50">expo..</text></g><g><title>optimized_mir (21,097,420 samples, 0.18%)</title><rect x="98.0830%" y="165" width="0.1844%" height="15" fill="rgb(250,166,2)"/><text x="98.3330%" y="175.50"></text></g><g><title>generate_crate_metadata (447,315,859 samples, 3.91%)</title><rect x="94.3691%" y="181" width="3.9098%" height="15" fill="rgb(242,216,29)"/><text x="94.6191%" y="191.50">gene..</text></g><g><title>hir_lowering (17,579,232 samples, 0.15%)</title><rect x="98.2790%" y="181" width="0.1537%" height="15" fill="rgb(230,116,27)"/><text x="98.5290%" y="191.50"></text></g><g><title>incr_comp_copy_cgu_workproducts (64,209,377 samples, 0.56%)</title><rect x="98.5524%" y="149" width="0.5612%" height="15" fill="rgb(228,99,48)"/><text x="98.8024%" y="159.50"></text></g><g><title>finish_ongoing_codegen (64,223,943 samples, 0.56%)</title><rect x="98.5524%" y="165" width="0.5614%" height="15" fill="rgb(253,11,6)"/><text x="98.8024%" y="175.50"></text></g><g><title>link_binary_remove_temps (26,234,888 samples, 0.23%)</title><rect x="99.1369%" y="133" width="0.2293%" height="15" fill="rgb(247,143,39)"/><text x="99.3869%" y="143.50"></text></g><g><title>link_crate (71,704,288 samples, 0.63%)</title><rect x="99.1171%" y="165" width="0.6267%" height="15" fill="rgb(236,97,10)"/><text x="99.3671%" y="175.50"></text></g><g><title>link_binary (71,700,171 samples, 0.63%)</title><rect x="99.1172%" y="149" width="0.6267%" height="15" fill="rgb(233,208,19)"/><text x="99.3672%" y="159.50"></text></g><g><title>link_rlib (43,213,260 samples, 0.38%)</title><rect x="99.3662%" y="133" width="0.3777%" height="15" fill="rgb(216,164,2)"/><text x="99.6162%" y="143.50"></text></g><g><title>link (149,682,085 samples, 1.31%)</title><rect x="98.4386%" y="181" width="1.3083%" height="15" fill="rgb(220,129,5)"/><text x="98.6886%" y="191.50"></text></g><g><title>parse_crate (27,595,844 samples, 0.24%)</title><rect x="99.7469%" y="181" width="0.2412%" height="15" fill="rgb(242,17,10)"/><text x="99.9969%" y="191.50"></text></g><g><title>all (11,440,758,871 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (11,440,758,871 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>